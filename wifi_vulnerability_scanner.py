import os
import socket
import sqlite3
from scapy.all import ARP, Ether, srp
import netifaces
from fpdf import FPDF
import shodan

# Shodan API key
SHODAN_API_KEY = 'YOUR_SHODAN_API_KEY'
shodan_api = shodan.Shodan(SHODAN_API_KEY)

# Database setup
def setup_database():
    conn = sqlite3.connect('network_scan.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS devices
                 (ip TEXT, mac TEXT, open_ports TEXT, closed_ports TEXT, vulnerabilities TEXT, firewall_status TEXT)''')
    conn.commit()
    conn.close()

# Scan network for devices
def scan_network(interface):
    print(f"Scanning network on interface {interface}...")
    ip_range = netifaces.ifaddresses(interface)[netifaces.AF_INET][0]['addr'] + '/24'
    arp = ARP(pdst=ip_range)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether/arp
    result = srp(packet, timeout=2, verbose=0)[0]

    devices = []
    for sent, received in result:
        devices.append({'ip': received.psrc, 'mac': received.hwsrc})
    return devices

# Scan ports on a device
def scan_ports(ip, ports):
    open_ports = []
    closed_ports = []
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)
        result = sock.connect_ex((ip, port))
        if result == 0:
            open_ports.append(port)
        else:
            closed_ports.append(port)
        sock.close()
    return open_ports, closed_ports

# Check vulnerabilities using Shodan
def check_vulnerabilities(ip, open_ports):
    vulnerabilities = []
    try:
        host_info = shodan_api.host(ip)
        for item in host_info['data']:
            if item['port'] in open_ports:
                vulnerabilities.append(f"Port {item['port']}: {item.get('vulns', 'No vulnerabilities found')}")
    except shodan.APIError as e:
        print(f"Shodan error: {e}")
    return vulnerabilities

# Detect firewall status
def detect_firewall(open_ports, closed_ports):
    if len(open_ports) > 0 and len(closed_ports) > 0:
        return "Possibly firewalled"
    elif len(open_ports) > 0:
        return "Open"
    else:
        return "Closed (firewall maybe blocking)"

# Save results to database
def save_to_db(ip, mac, open_ports, closed_ports, vulnerabilities, firewall_status):
    conn = sqlite3.connect('network_scan.db')
    c = conn.cursor()
    c.execute("INSERT INTO devices (ip, mac, open_ports, closed_ports, vulnerabilities, firewall_status) VALUES (?, ?, ?, ?, ?, ?)",
              (ip, mac, str(open_ports), str(closed_ports), str(vulnerabilities), firewall_status))
    conn.commit()
    conn.close()

# Generate PDF report
def generate_pdf_report():
    conn = sqlite3.connect('network_scan.db')
    c = conn.cursor()
    c.execute("SELECT * FROM devices")
    devices = c.fetchall()
    conn.close()

    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Network Scan Report", ln=True, align="C")

    for device in devices:
        pdf.cell(200, 10, txt=f"IP: {device[0]}", ln=True)
        pdf.cell(200, 10, txt=f"MAC: {device[1]}", ln=True)
        pdf.cell(200, 10, txt=f"Open Ports: {device[2]}", ln=True)
        pdf.cell(200, 10, txt=f"Closed Ports: {device[3]}", ln=True)
        pdf.cell(200, 10, txt=f"Vulnerabilities: {device[4]}", ln=True)
        pdf.cell(200, 10, txt=f"Firewall Status: {device[5]}", ln=True)
        pdf.cell(200, 10, txt="", ln=True)  # Blank line for spacing

    pdf.output("network_scan_report.pdf")
    print(f"Report generated: network_scan_report.pdf")

# Main function
def main():
    print("Network Scanner and Vulnerability Assessment Tool")
    print("-" * 50)
    
    # Set up the database
    setup_database()
    
    # Get network interface from user
    available_interfaces = netifaces.interfaces()
    print("Available network interfaces:")
    for i, iface in enumerate(available_interfaces):
        print(f"{i+1}. {iface}")
    
    interface_choice = input(f"Enter the network interface number (1-{len(available_interfaces)}): ")
    try:
        interface = available_interfaces[int(interface_choice) - 1]
    except (ValueError, IndexError):
        print("Invalid interface selection. Exiting.")
        return
    
    # Scan network for devices
    print(f"\nScanning network on {interface}...")
    devices = scan_network(interface)
    
    if not devices:
        print("No devices found. Exiting.")
        return
    
    print(f"\nFound {len(devices)} devices:")
    for i, device in enumerate(devices):
        print(f"{i+1}. IP: {device['ip']}, MAC: {device['mac']}")
    
    # Define ports to scan
    ports_to_scan = range(1, 1025)
    print(f"\nWill scan ports 1-1024 on each device")
    
    # Perform detailed scan on each device
    scan_all = input("\nScan all devices? (y/n): ").lower() == 'y'
    
    scanned_devices = []
    if scan_all:
        device_indices = range(len(devices))
    else:
        indices_input = input("Enter device numbers to scan (comma-separated, e.g., 1,3,5): ")
        try:
            device_indices = [int(idx.strip()) - 1 for idx in indices_input.split(',')]
        except ValueError:
            print("Invalid input. Exiting.")
            return
    
    # Loop through selected devices
    for idx in device_indices:
        if idx < 0 or idx >= len(devices):
            print(f"Invalid device index: {idx+1}. Skipping.")
            continue
        
        device = devices[idx]
        ip = device['ip']
        mac = device['mac']
        
        print(f"\nScanning device {idx+1}: IP {ip}, MAC {mac}")
        
        # Scan ports
        print(f"  Scanning ports 1-1024...")
        open_ports, closed_ports = scan_ports(ip, ports_to_scan)
        print(f"  Found {len(open_ports)} open ports and {len(closed_ports)} closed ports")
        
        # Check firewall status
        firewall_status = detect_firewall(open_ports, closed_ports)
        print(f"  Firewall status: {firewall_status}")
        
        # Check vulnerabilities if Shodan API key is provided
        vulnerabilities = []
        if SHODAN_API_KEY != 'YOUR_SHODAN_API_KEY' and open_ports:
            print(f"  Checking for vulnerabilities via Shodan...")
            vulnerabilities = check_vulnerabilities(ip, open_ports)
            print(f"  Found {len(vulnerabilities)} potential vulnerabilities")
        else:
            print("  Skipping vulnerability check (no Shodan API key or no open ports)")
        
        # Save results to database
        save_to_db(ip, mac, str(open_ports), str(closed_ports), str(vulnerabilities), firewall_status)
        print(f"  Results saved to database")
        
        scanned_devices.append({
            'ip': ip,
            'mac': mac,
            'open_ports': open_ports,
            'closed_ports': closed_ports,
            'vulnerabilities': vulnerabilities,
            'firewall_status': firewall_status
        })
    
    # Generate report
    if scanned_devices:
        print("\nScanning complete.")
        generate_report = input("Generate PDF report? (y/n): ").lower() == 'y'
        if generate_report:
            generate_pdf_report()
    else:
        print("\nNo devices were scanned.")

# Entry point
if __name__ == "__main__":
    main()
